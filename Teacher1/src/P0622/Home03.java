package P0622;

public class Home03 {
	public static void main(String[] args) {
		//	발생한 문자를 기억할 변수를 준비한다.
		char[]	ch = new char[26];
		//	10번 반복해서 되는 문제가 아니다.
		//	중복되면 다시 발생해야 하므로 몇번 반복할지 모른다.
		//	성공한 회수를 따로 기억하고 있어야 하고
		//	기억될 위치도 따로 기억하고 있어야 한다.
		int		success = 0;		//	성공한 회수
		int		pos = 0;			//	기억될 위치
		//		원래는 두 변수가 같은 역활을 하므로 하나의 변수로
		//		이용할 수 있다.
		//		여러분이 조금이라도 이해를 돕기 위해서.....
		
		//	이제 문자를 발생하기 시작하자.
		//	몇번 시도해야 10개가 성공할지 모르는 상태이다.
		System.out.println("시작");
		DASI:
		while(true) {
			//	문자를 발생한다.
			char	now = (char)(Math.random() * ('Z' - 'A' + 1) + 'A');
			//	지금방금 발생한 문자가 이미 성공한 문자와 중복되니?
			//	성공한 문자의 개수는  success가 알고있으므로
			//	거기까지만 비교해 보면 된다.
			for(int i = 0; i < success; i++) {
				//	이 경우 성공된 데이터가 한개도 없으면....
				//	이 for 명령은 한번도 실행되지 않는다.
				if(now == ch[i]) {
					//	지금 발생한 문자는 중복된 문자이다.
					//	고로 다음 문자를 발생해서 시도해야한다.
					//	다시 while부터 시도해야한다.
					continue DASI;
				}
			}
			//	for 명령이 정상 종료된다는 의미는 continue 당하지
			//	않았다는 의미이다.
			//	고로 이 말은 중복된 문자가 아니다 라는 말이다.
			//	1.	성공한 문자를 기억할 배열에 기억한다.
			ch[pos] = now;
			//	2.	다음에 기억할 위치는 현재 위치 +1 위치에 기억해야 한다.
			pos = pos + 1;
			//	3.	성공회수를 증가시켜 놓는다.
			success = success + 1;
			//	참고
			//		무한루프는 말 그대로 프로그램 끝나지 않는다.
			//		그래서 무한루프로 처리하면
			//		반드시 반복 명령 어딘가에서 반복이 끝나도록 
			//		고민해 주어야 한다.
			if(success == 26) {
				break;
			}
		}

		//	발생한 문자 10개를 출력해 보자.
		for(int i = 0; i < ch.length; i++) {
			System.out.println(ch[i]);
		}
	}
}





